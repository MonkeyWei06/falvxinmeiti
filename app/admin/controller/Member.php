<?php
/**
 * Created by PhpStorm.
 * User: Memberistrator
 * Date: 2018/1/4
 * Time: 9:49
 */
namespace app\admin\controller;
use \app\admin\model\Member as MemberModel;
use \app\admin\model\Balance as BalanceModel;
use think\Db;
class Member extends Common
{
    private $PageCount=20;
    private $MenuName='会员';//栏目名称
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->assign('MenuName',$this->MenuName);
    }
    public function index()
    {
        $UrlParam=input('get.');
        $UrlParam['RegDomain']='-1';//-1为主站，其他为域名前缀
        $UrlParam['GroupID']=1;//1会员2代理商
        $UrlParam['MemberTypeID']=1; //不知
		$balance=input('balance');
		$gift=input('gift');
		$UrlParam['balance']=0;
		$UrlParam['gift']=0;
		if($balance>0){
			$UrlParam['balance']=$balance;
		}
		if($gift>0){
			$UrlParam['gift']=$gift;
		}
        $Model=new MemberModel();
        $List=$Model->GetList($UrlParam,$this->PageCount);
        $this->assign('List',$List);

		$MemberBalanceCount=$Model->where('MemberBalanceCount','>',0)->sum('MemberBalanceCount');

		$MemberAgentBalanceCount=$Model->where('MemberAgentBalanceCount','>',0)->sum('MemberAgentBalanceCount');

		$MemberProfit=$Model->where('MemberProfit','>',0)->sum('MemberProfit');


		$this->assign('MemberBalanceCount',$MemberBalanceCount+$MemberAgentBalanceCount);
		$this->assign('MemberProfit',$MemberProfit);
		$BalanceModel=new BalanceModel();
		$Where=array();
		$Whered=array();

		$Where['BalanceType']=1;
		$Where['BalanceGroup']=2;
		$Where['BalancePayState']=1;
		$czcount=$BalanceModel->where($Where)->sum('BalanceCount');

		$czcount=$czcount;

		$this->assign('czcount',$czcount);
        $this->assign('UrlParam',$UrlParam);
        $this->assign('GetMemberTypeList',$this->GetMemberTypeList());
        return $this->fetch();
    }
    public function add()
    {
        if($this->request->isPost()){
            $Post=input('post.');
            $this->AddSave($Post);
        }else{
            $this->assign('GetMemberTypeList',$this->GetMemberTypeList());
			$this->assign('MemberPriceType',$this->GetCurrentWholeType(115));//	会员价格
            return $this->fetch();
        }
    }
    //保存数据
    private function AddSave($Post)
    {
        $Model=new MemberModel();
        $State=$Model->where('MemberName',$Post['MemberName'])->count();
        if($State!=0) $this->error('您所输入的会员名称已被注册');
        if(empty($Post['MemberPwd']))$this->error('当前会员密码不能为空');
        if($Post['MemberPwd']!=$Post['MemberAffirmPwd']) $this->error('您的两次密码输入不一致');
		$superacc=$Post['superacc'];
        unset($Post['MemberAffirmPwd']);
        //手机号验证
        $State=$Model->where('MemberMobile',$Post['MemberMobile'])->count();
        if($State!=0) $this->error('您所输入的会员手机号已被注册');
       // $PicPath=$this->OneUpload('MemberPicPath');
       // if(!empty($PicPath)) $Post['MemberPicPath']=$PicPath;	 
        $MemberPwd=$Post['MemberPwd'];
        $MemberName=$Post['MemberName'];
		 $Post['RegDomain']='-1';
        $Post['MemberPwd']=md5(config('config.MemberPwdKey').md5($MemberPwd.$MemberName).md5($MemberPwd));
		$Post['MemberTypeID']=1;
        $Model->data($Post)->save();
        $ID=$Model->getLastInsID();
		if($superacc==1){
			$data['Tokenrand']=md5($ID);
			$Model->where('MemberID',$ID)->update($data);
	   }
        AdminLogDetail(['LogOperateTitle'=>$this->MenuName.'已添加成功','LogOperateContent'=>'ID:'.$ID]);
        $this->success($this->MenuName.'添加成功',url('index'));
    }
    //数据修改
    public function edit()
    {
        if($this->request->isPost())
        {
            $Post=input('post.');
            $this->EditSave($Post);
        }else {
            $ID=input('id','','abs');
            $Model=new MemberModel();
            $Info=$Model->where('MemberID',$ID)->find();
            $this->assign('Info',$Info);
            $this->assign('GetMemberTypeList',$this->GetMemberTypeList());
            $this->assign('MemberPriceType',$this->GetCurrentWholeType(115));//	会员价格
            return $this->fetch();
        }
    }
    //修改保存
    private function EditSave($Post)
    {
        $MemberID=$Post['MemberID'];
        if(!empty($Post['MemberPwd']))
        {
            if($Post['MemberPwd']!=$Post['MemberAffirmPwd'])
            {
                $this->error('您的两次密码输入不一致');
            }
            $MemberPwd=$Post['MemberPwd'];
            $MemberName=$Post['MemberName'];
            $Post['MemberPwd']=md5(config('config.MemberPwdKey').md5($MemberPwd.$MemberName).md5($MemberPwd));
        }else{
            unset($Post['MemberPwd']);
        }
        unset($Post['MemberName']);
        unset($Post['MemberAffirmPwd']);
        $Model=new MemberModel();
        //手机号验证
//        $MemberMobile=$Model->where('MemberID',$MemberID)->value('MemberMobile');
//        if($MemberMobile!=$Post['MemberMobile'])
//        {
//            $State=$Model->where('MemberMobile',$Post['MemberMobile'])->count();
//            if($State!=0) $this->error('您所输入的会员手机号已被注册');
//        }
        //邮箱验证
//        $MemberEmail=$Model->where('MemberID',$MemberID)->value('MemberEmail');
//        if($MemberEmail!=$Post['MemberEmail']) {
//            $State = $Model->where('MemberEmail', $Post['MemberEmail'])->count();
//            if ($State != 0) $this->error('您所输入的会员邮箱已被注册');
//        }
        //图片上传
//        $PicPath=$this->OneUpload('MemberPicPath');
//        if(!empty($PicPath)){
//            $Post['MemberPicPath']=$PicPath;
//            //删除图片
//            $this->DelUpLoad('MemberID',$MemberID,'member','MemberPicPath');
//        }
        $Model->where('MemberID',$MemberID)->update($Post);
        //dump($Post);exit;
        AdminLogDetail(['LogOperateTitle'=>$this->MenuName.'修改成功','LogOperateContent'=>'ID:'.$MemberID]);
        $this->success($this->MenuName.'修改成功',url('index'));
    }
    //删除数据
    public function del()
    {
        $ID=input('param.id','0','abs');
        if(empty($ID)){
            $ID=input('post.Del/a');
        }
        if(empty($ID)){$this->error('请不要发非法操作');}
        //删除图片
        $this->DelUpLoad('MemberID',$ID,'member','MemberPicPath');
        $Where=array();
        $Where['MemberID']=['in',$ID];
        \think\Db::name('member')->where($Where)->delete();
        $IDStr=is_array($ID)?implode(',',$ID):$ID;
        AdminLogDetail(['LogOperateTitle'=>$this->MenuName.'数据删除','LogOperateContent'=>'ID:'.$IDStr]);
        $this->success($this->MenuName.'删除成功');
    }
    //删除数据
    public function balancedel(){
        $ID=input('param.id','0','abs');
        if(empty($ID)){
            $ID=input('post.Del/a');
        }
        if(empty($ID)){$this->error('请不要发非法操作');}
        $Where=array();
        $Where['BalanceID']=['in',$ID];
        \think\Db::name('balance')->where($Where)->delete();
        $IDStr=is_array($ID)?implode(',',$ID):$ID;
        AdminLogDetail(['LogOperateTitle'=>$this->MenuName.'充值/消费数据删除','LogOperateContent'=>'ID:'.$IDStr]);
        $this->success($this->MenuName.'充值/消费删除成功');
    }
    //数据排序
    public function sort()
    {
        $Sort=input('post.Sort/a');
        //dump($Sort);
        if(!empty($Sort)){
            foreach ($Sort as $key=>$value){
                \think\Db::name('member')->where('MemberID',$key)->update(['MemberSort'=>$value]);
            }
            $ID=array_keys($Sort);
            $IDStr=implode(',',$ID);
            AdminLogDetail(['LogOperateTitle'=>$this->MenuName.'排序成功','LogOperateContent'=>'ID:'.$IDStr]);
        }
        $this->success($this->MenuName.'排序成功');
    }
    //推荐图谱
    public function atlas(){
        $Model=new MemberModel();
        $keyword=input('keyword');
        $Where=array();
        if(!empty($keyword)){
            $Where['MemberName']=$keyword;
        }else{
            $Where['t1.MemberRecommendID']='0';
        }
        $List=$Model->alias('t1')
            ->field('t1.*,t2.TypeName')
            ->join('__MEMBERTYPE__ t2','t1.MemberTypeID=t2.TypeID','left')
            ->where($Where)
            ->order('t1.MemberID Desc')->select();
        $this->assign('List',$List);
        return $this->fetch();
    }
    //财务报表
    public function finance(){
        $ID=input('id','','abs');
        $UrlParam=input('get.');
        $UrlParam['MemberID']=$ID;
        $StartDate = input('startdate', '');
        $EndDate = input('enddate', '');
        if(!empty($StartDate) || !empty($EndDate)){
            if(empty($StartDate)) $StartDate=date('Y-m-d');
            if(empty($EndDate)) $EndDate=date('Y-m-d');
        }
        if(!empty($StartDate) && !empty($EndDate)){
            $StartDate=strtotime($StartDate);$EndDate=strtotime($EndDate);
            $MinDate=min($StartDate,$EndDate);$MaxDate=max($StartDate,$EndDate);
            $MaxDate+=86399;
            $UrlParam['startdate']=date('Y-m-d',$MinDate);
            $UrlParam['enddate']=date('Y-m-d',$MaxDate);
            $UrlParam['MinDate']=$MinDate;$UrlParam['MaxDate']=$MaxDate;
        }
        $Model=new BalanceModel();
        $List=$Model->GetList($UrlParam,$this->PageCount);	
        $this->assign('List',$List);

		$czcount=$Model->Getsumcount($UrlParam,1);
		$this->assign('czcount',$czcount);
		if(!empty($UrlParam['MinDate']) && !empty($UrlParam['MaxDate'])){
		//消费计算
		$xfcount=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.order_money,A.order_state,A.order_time,T.member_id')
			->join('article T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->where('A.order_time','between',[$UrlParam['MinDate'],$UrlParam['MaxDate']])			
			->sum("A.order_money");
			$xfcount2=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.order_money,A.order_state,A.order_time,T.member_id')
			->join('wearticle T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->where('A.order_time','between',[$UrlParam['MinDate'],$UrlParam['MaxDate']])			
			->sum("A.order_money");

		}else{			
			$xfcount=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.order_money,A.order_state,A.order_time,T.member_id')
			->join('article T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->sum("A.order_money");
			$xfcount2=Db::name('agencyorder')
			->alias('A')
			->field('A.wearticle_id,A.order_money,A.order_state,A.order_time,T.member_id')
			->join('wearticle T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->sum("A.order_money");
		}
		$this->assign('xfcount',$xfcount+$xfcount2);
		//成本计算
		if(!empty($UrlParam['MinDate']) && !empty($UrlParam['MaxDate'])){
			$tgcount=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.media_money,A.order_state,A.order_time,T.member_id')
			->join('article T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->where('A.order_time','between',[$UrlParam['MinDate'],$UrlParam['MaxDate']])			
			->sum("A.media_money");
			$tgcount2=Db::name('agencyorder')
			->alias('A')
			->field('A.wearticle_id,A.media_money,A.order_state,A.order_time,T.member_id')
			->join('article T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->where('A.order_time','between',[$UrlParam['MinDate'],$UrlParam['MaxDate']])			
			->sum("A.media_money");
		}else{			
			$tgcount=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.media_money,A.order_state,A.order_time,T.member_id')
			->join('article T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->sum("A.media_money");
			$tgcount2=Db::name('agencyorder')
			->alias('A')
			->field('A.article_id,A.media_money,A.order_state,A.order_time,T.member_id')
			->join('wearticle T','T.article_id=A.article_id','left')
			->where('A.order_state',2)
			->where('T.member_id',$ID)
			->sum("A.media_money");
		}
		$this->assign('tgcount',$tgcount+$tgcount2);
        $this->assign('UrlParam',$UrlParam);
        return $this->fetch();
    }
    //会员充值
    public function topup(){
        if($this->request->isPost()){
            $Post=input('post.');
            $this->TopUpSave($Post);
        }else{
            $ID=input('id','','abs');
            $Model=new MemberModel();
            $Info=$Model->where('MemberID',$ID)->find();
            $this->assign('Info',$Info);
            return $this->fetch();
        }
    }
    //保存数据
    private function TopUpSave($Post)
    {
        $MemberID=$Post['BalanceMemberID'];
        $Model=new BalanceModel();
        $MemberModel=new \app\admin\model\Member();
        $Info=$MemberModel->where('MemberID',$MemberID)->find();
        if(empty($Info['MemberID'])) $this->error('您所充值的会员不存在');
        $Post['BalanceMemberRecommendID']=$Info['MemberRecommendID'];
        $Post['BalanceMemberRecommendPath']=$Info['MemberRecommendPath'];
        $MemberID=$Info['MemberID'];
        $Sum=0;$Mark='';
        if($Post['BalanceType']==1){
            $Mark='充值';
            $Sum=$Info['MemberBalanceCount']+$Post['BalanceCount'];
			$Post['BalancePayState']=1;
        }else if($Post['BalanceType']==2){
            $Mark='扣除';
            if($Info['MemberBalanceCount']>=$Post['BalanceCount']){
                $Sum=$Info['MemberBalanceCount']-$Post['BalanceCount'];
            }else{
                $Post['BalanceCount']=$Info['MemberBalanceCount'];
                $Sum=0;
            }
        }
        //会员账户积分余额变更
        $Data=array();
        $Data['MemberBalanceCount']=$Sum;
        $MemberModel->EditInfo($MemberID,$Data);
        $Post['BalanceMemberID']=$MemberID;
        $Post['BalanceCurrentCount']=$Sum;
        $Post['BalanceState']=1;
        $Post['BalanceNumber']='cz'.order_num();
        $Model->data($Post)->save();
        $IDStr=$Model->getLastInsID();
        AdminLogDetail(['LogOperateTitle'=>$this->MenuName.$Mark.'操作成功','LogOperateContent'=>'ID:'.$IDStr]);
        $this->success($this->MenuName.$Mark.'操作成功',url('topup',['id'=>$MemberID]));
    }
}